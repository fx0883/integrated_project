/**
 * 简化版的highlight.js实现，作为CDN加载失败时的备用方案
 * 增强版本，支持更多语言和格式
 */
(function() {
    // 创建全局hljs对象
    window.hljs = {
        // 语言列表
        languages: {},
        
        // 注册语言
        registerLanguage: function(name, languageDef) {
            this.languages[name] = languageDef;
            return this;
        },
        
        // 获取语言
        getLanguage: function(name) {
            return this.languages[name];
        },
        
        // 配置方法
        configure: function(options) {
            this.options = this.options || {};
            for (var key in options) {
                this.options[key] = options[key];
            }
            return this;
        },
        
        // 简化版的高亮所有元素方法
        highlightAll: function() {
            var blocks = document.querySelectorAll('pre code');
            for (var i = 0; i < blocks.length; i++) {
                this.highlightElement(blocks[i]);
            }
        },
        
        // 简化版的高亮元素方法
        highlightElement: function(block) {
            try {
                console.log("应用高亮处理", block);
                
                // 获取代码内容
                const code = block.textContent || '';
                
                // 尝试检测语言
                var language = '';
                var classList = block.classList || [];
                for (var i = 0; i < classList.length; i++) {
                    var className = classList[i];
                    if (className.startsWith('language-')) {
                        language = className.substring(9);
                        break;
                    }
                }
                
                // 简单的语法高亮规则
                let html = code
                    // 字符串
                    .replace(/(["'])(.*?)\1/g, '<span class="hljs-string">$1$2$1</span>')
                    // 注释 (// 和 /* */)
                    .replace(/\/\/(.*)$/gm, '<span class="hljs-comment">//\$1</span>')
                    .replace(/\/\*[\s\S]*?\*\//g, function(match) {
                        return '<span class="hljs-comment">' + match + '</span>';
                    })
                    // Python注释
                    .replace(/#(.*)$/gm, '<span class="hljs-comment">#\$1</span>')
                    // 关键字 - 多种语言
                    .replace(/\b(function|return|if|for|while|else|var|let|const|class|import|export|from|new|this|try|catch|throw|def|lambda|async|await|module|package|using|namespace|private|public|protected|static|final|extends|implements|interface|enum|virtual|abstract|override|super|null|undefined|true|false)\b/g, 
                             '<span class="hljs-keyword">$1</span>')
                    // 数字
                    .replace(/\b(\d+(\.\d+)?)\b/g, '<span class="hljs-number">$1</span>')
                    // 函数定义
                    .replace(/\b(function|def|class|procedure)\s+([a-zA-Z_][a-zA-Z0-9_]*)/g, 
                             '<span class="hljs-keyword">$1</span> <span class="hljs-title">$2</span>');

                // 保留换行符和空格
                html = html.replace(/\n/g, '\n')
                           .replace(/  /g, '  ');
                
                // 应用高亮
                block.innerHTML = html;
                
                // 添加hljs类
                block.classList.add('hljs');
                if (language) {
                    block.classList.add('language-' + language);
                }
                
                console.log("高亮应用成功");
            } catch (e) {
                console.error("高亮出错:", e);
                // 出错时至少保留原始内容
                if (!block.innerHTML) {
                    block.textContent = block.textContent || '';
                }
            }
        }
    };
    
    // 添加一些基本语言支持
    hljs.registerLanguage('python', function() {
        return {
            name: 'Python',
            keywords: {
                keyword: 'and as assert break class continue def del elif else except finally for from global if import in is lambda nonlocal not or pass raise return try while with yield',
                built_in: 'True False None',
                literal: 'True False None'
            }
        };
    });
    
    hljs.registerLanguage('javascript', function() {
        return {
            name: 'JavaScript',
            keywords: {
                keyword: 'break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield',
                literal: 'true false null undefined NaN Infinity',
                built_in: 'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise'
            }
        };
    });
    
    // 触发hljs准备就绪事件
    document.dispatchEvent(new Event('highlightjsReady'));
    console.log("备用highlight.js已加载");
})(); 