# Generated by Django 5.2 on 2025-05-21 12:26

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tenants', '0002_tenant_code'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='文章标题')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='URL别名')),
                ('content', models.TextField(verbose_name='文章内容')),
                ('content_type', models.CharField(choices=[('markdown', 'Markdown'), ('html', 'HTML')], default='markdown', max_length=20, verbose_name='内容类型')),
                ('excerpt', models.TextField(blank=True, null=True, verbose_name='文章摘要')),
                ('status', models.CharField(choices=[('draft', '草稿'), ('pending', '待审核'), ('published', '已发布'), ('archived', '已归档')], default='draft', max_length=20, verbose_name='状态')),
                ('is_featured', models.BooleanField(default=False, verbose_name='是否特色')),
                ('is_pinned', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('allow_comment', models.BooleanField(default=True, verbose_name='允许评论')),
                ('visibility', models.CharField(choices=[('public', '公开'), ('private', '仅登录用户'), ('password', '密码访问')], default='public', max_length=20, verbose_name='可见性')),
                ('password', models.CharField(blank=True, max_length=128, null=True, verbose_name='访问密码')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='发布时间')),
                ('cover_image', models.CharField(blank=True, max_length=255, null=True, verbose_name='封面图片')),
                ('template', models.CharField(blank=True, max_length=100, null=True, verbose_name='模板')),
                ('sort_order', models.IntegerField(default=0, verbose_name='排序')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to=settings.AUTH_USER_MODEL, verbose_name='作者')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='tenants.tenant', verbose_name='所属租户')),
            ],
            options={
                'verbose_name': '文章',
                'verbose_name_plural': '文章',
                'db_table': 'cms_article',
                'ordering': ['-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AccessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='会话ID')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP地址')),
                ('user_agent', models.CharField(blank=True, max_length=255, null=True, verbose_name='用户代理')),
                ('referer', models.URLField(blank=True, null=True, verbose_name='来源URL')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='访问时间')),
                ('reading_time', models.IntegerField(blank=True, null=True, verbose_name='阅读时长(秒)')),
                ('country', models.CharField(blank=True, max_length=50, null=True, verbose_name='国家')),
                ('region', models.CharField(blank=True, max_length=100, null=True, verbose_name='区域/省份')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='城市')),
                ('device', models.CharField(blank=True, max_length=50, null=True, verbose_name='设备类型')),
                ('browser', models.CharField(blank=True, max_length=50, null=True, verbose_name='浏览器')),
                ('os', models.CharField(blank=True, max_length=50, null=True, verbose_name='操作系统')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='tenants.tenant', verbose_name='所属租户')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='access_logs', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='cms.article', verbose_name='文章')),
            ],
            options={
                'verbose_name': '访问日志',
                'verbose_name_plural': '访问日志',
                'db_table': 'cms_access_log',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ArticleMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seo_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='SEO标题')),
                ('seo_description', models.TextField(blank=True, null=True, verbose_name='SEO描述')),
                ('seo_keywords', models.CharField(blank=True, max_length=255, null=True, verbose_name='SEO关键词')),
                ('og_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='OG标题')),
                ('og_description', models.TextField(blank=True, null=True, verbose_name='OG描述')),
                ('og_image', models.CharField(blank=True, max_length=255, null=True, verbose_name='OG图片')),
                ('schema_markup', models.TextField(blank=True, null=True, verbose_name='结构化数据标记')),
                ('canonical_url', models.URLField(blank=True, null=True, verbose_name='规范URL')),
                ('robots', models.CharField(blank=True, max_length=100, null=True, verbose_name='Robots指令')),
                ('custom_meta', models.TextField(blank=True, null=True, verbose_name='自定义元数据')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('article', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='meta', to='cms.article', verbose_name='文章')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_metas', to='tenants.tenant', verbose_name='所属租户')),
            ],
            options={
                'verbose_name': '文章元数据',
                'verbose_name_plural': '文章元数据',
                'db_table': 'cms_article_meta',
            },
        ),
        migrations.CreateModel(
            name='ArticleStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('views_count', models.IntegerField(default=0, verbose_name='浏览次数')),
                ('unique_views_count', models.IntegerField(default=0, verbose_name='独立访客浏览次数')),
                ('likes_count', models.IntegerField(default=0, verbose_name='点赞数')),
                ('dislikes_count', models.IntegerField(default=0, verbose_name='踩数')),
                ('comments_count', models.IntegerField(default=0, verbose_name='评论数')),
                ('shares_count', models.IntegerField(default=0, verbose_name='分享数')),
                ('bookmarks_count', models.IntegerField(default=0, verbose_name='收藏数')),
                ('avg_reading_time', models.IntegerField(default=0, verbose_name='平均阅读时长(秒)')),
                ('bounce_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='跳出率(%)')),
                ('last_updated_at', models.DateTimeField(auto_now=True, verbose_name='最后更新时间')),
                ('article', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='cms.article', verbose_name='文章')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_statistics', to='tenants.tenant', verbose_name='所属租户')),
            ],
            options={
                'verbose_name': '文章统计',
                'verbose_name_plural': '文章统计',
                'db_table': 'cms_article_statistics',
            },
        ),
        migrations.CreateModel(
            name='ArticleVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('content', models.TextField(verbose_name='内容')),
                ('content_type', models.CharField(max_length=20, verbose_name='内容类型')),
                ('excerpt', models.TextField(blank=True, null=True, verbose_name='摘要')),
                ('version_number', models.IntegerField(verbose_name='版本号')),
                ('change_description', models.TextField(blank=True, null=True, verbose_name='变更说明')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('diff_data', models.TextField(blank=True, null=True, verbose_name='差异数据')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='cms.article', verbose_name='文章')),
                ('editor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edited_versions', to=settings.AUTH_USER_MODEL, verbose_name='编辑者')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_versions', to='tenants.tenant', verbose_name='所属租户')),
            ],
            options={
                'verbose_name': '文章版本',
                'verbose_name_plural': '文章版本',
                'db_table': 'cms_article_version',
                'ordering': ['-version_number'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='分类名称')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='URL别名')),
                ('description', models.TextField(blank=True, null=True, verbose_name='分类描述')),
                ('cover_image', models.CharField(blank=True, max_length=255, null=True, verbose_name='封面图片')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('sort_order', models.IntegerField(default=0, verbose_name='排序')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('seo_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='SEO标题')),
                ('seo_description', models.TextField(blank=True, null=True, verbose_name='SEO描述')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='cms.category', verbose_name='父分类')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='tenants.tenant', verbose_name='所属租户')),
            ],
            options={
                'verbose_name': '分类',
                'verbose_name_plural': '分类',
                'db_table': 'cms_category',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ArticleCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_categories', to='cms.article', verbose_name='文章')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_categories', to='tenants.tenant', verbose_name='所属租户')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_categories', to='cms.category', verbose_name='分类')),
            ],
            options={
                'verbose_name': '文章分类关系',
                'verbose_name_plural': '文章分类关系',
                'db_table': 'cms_article_category',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guest_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='访客名称')),
                ('guest_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='访客邮箱')),
                ('guest_website', models.URLField(blank=True, null=True, verbose_name='访客网站')),
                ('content', models.TextField(verbose_name='评论内容')),
                ('status', models.CharField(choices=[('pending', '待审核'), ('approved', '已批准'), ('spam', '垃圾评论'), ('trash', '已删除')], default='pending', max_length=20, verbose_name='状态')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP地址')),
                ('user_agent', models.CharField(blank=True, max_length=255, null=True, verbose_name='用户代理')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_pinned', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('likes_count', models.IntegerField(default=0, verbose_name='点赞数')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='cms.article', verbose_name='文章')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='cms.comment', verbose_name='父评论')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tenants.tenant', verbose_name='所属租户')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cms_comments', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '评论',
                'verbose_name_plural': '评论',
                'db_table': 'cms_comment',
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Interaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('like', '点赞'), ('dislike', '踩'), ('bookmark', '收藏'), ('share', '分享')], max_length=20, verbose_name='类型')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP地址')),
                ('user_agent', models.CharField(blank=True, max_length=255, null=True, verbose_name='用户代理')),
                ('extra_data', models.TextField(blank=True, null=True, verbose_name='附加数据')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='cms.article', verbose_name='文章')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='tenants.tenant', verbose_name='所属租户')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户互动',
                'verbose_name_plural': '用户互动',
                'db_table': 'cms_interaction',
            },
        ),
        migrations.CreateModel(
            name='OperationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', '创建'), ('update', '更新'), ('delete', '删除'), ('publish', '发布'), ('archive', '归档'), ('restore', '恢复'), ('approve', '批准'), ('reject', '拒绝')], max_length=50, verbose_name='操作类型')),
                ('entity_type', models.CharField(choices=[('article', '文章'), ('category', '分类'), ('tag', '标签'), ('comment', '评论'), ('user', '用户'), ('setting', '设置')], max_length=50, verbose_name='实体类型')),
                ('entity_id', models.IntegerField(blank=True, null=True, verbose_name='实体ID')),
                ('details', models.TextField(blank=True, null=True, verbose_name='操作详情')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP地址')),
                ('user_agent', models.CharField(blank=True, max_length=255, null=True, verbose_name='用户代理')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='操作时间')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operation_logs', to='tenants.tenant', verbose_name='所属租户')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operation_logs', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '操作日志',
                'verbose_name_plural': '操作日志',
                'db_table': 'cms_operation_log',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='标签名称')),
                ('slug', models.SlugField(unique=True, verbose_name='URL别名')),
                ('description', models.TextField(blank=True, null=True, verbose_name='标签描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('color', models.CharField(blank=True, max_length=20, null=True, verbose_name='颜色')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='tenants.tenant', verbose_name='所属租户')),
            ],
            options={
                'verbose_name': '标签',
                'verbose_name_plural': '标签',
                'db_table': 'cms_tag',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ArticleTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_tags', to='cms.article', verbose_name='文章')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_tags', to='tenants.tenant', verbose_name='所属租户')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_tags', to='cms.tag', verbose_name='标签')),
            ],
            options={
                'verbose_name': '文章标签关系',
                'verbose_name_plural': '文章标签关系',
                'db_table': 'cms_article_tag',
            },
        ),
        migrations.CreateModel(
            name='TagGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='标签组名称')),
                ('slug', models.SlugField(unique=True, verbose_name='URL别名')),
                ('description', models.TextField(blank=True, null=True, verbose_name='标签组描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_groups', to='tenants.tenant', verbose_name='所属租户')),
            ],
            options={
                'verbose_name': '标签组',
                'verbose_name_plural': '标签组',
                'db_table': 'cms_tag_group',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='tag',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tags', to='cms.taggroup', verbose_name='标签组'),
        ),
        migrations.CreateModel(
            name='UserLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='等级名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='等级描述')),
                ('level', models.IntegerField(verbose_name='等级值')),
                ('max_articles', models.IntegerField(default=10, verbose_name='最大文章数')),
                ('max_storage_mb', models.IntegerField(default=100, verbose_name='最大存储空间(MB)')),
                ('permissions', models.TextField(blank=True, null=True, verbose_name='权限')),
                ('is_default', models.BooleanField(default=False, verbose_name='是否默认')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_levels', to='tenants.tenant', verbose_name='所属租户')),
            ],
            options={
                'verbose_name': '用户等级',
                'verbose_name_plural': '用户等级',
                'db_table': 'cms_user_level',
                'ordering': ['level'],
            },
        ),
        migrations.CreateModel(
            name='UserLevelRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='开始时间')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='结束时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_relations', to='cms.userlevel', verbose_name='等级')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_level_relations', to='tenants.tenant', verbose_name='所属租户')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='level_relations', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户等级关系',
                'verbose_name_plural': '用户等级关系',
                'db_table': 'cms_user_level_relation',
            },
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['status', 'created_at'], name='cms_article_status_2e86da_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['status', 'published_at'], name='cms_article_status_c75ec2_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['tenant', 'status'], name='cms_article_tenant__cde368_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['tenant', 'published_at'], name='cms_article_tenant__95add5_idx'),
        ),
        migrations.AddIndex(
            model_name='accesslog',
            index=models.Index(fields=['article', 'created_at'], name='cms_access__article_3618e6_idx'),
        ),
        migrations.AddIndex(
            model_name='accesslog',
            index=models.Index(fields=['user'], name='cms_access__user_id_0fb8a1_idx'),
        ),
        migrations.AddIndex(
            model_name='accesslog',
            index=models.Index(fields=['session_id'], name='cms_access__session_e2f6a1_idx'),
        ),
        migrations.AddIndex(
            model_name='accesslog',
            index=models.Index(fields=['ip_address'], name='cms_access__ip_addr_e1d650_idx'),
        ),
        migrations.AddIndex(
            model_name='accesslog',
            index=models.Index(fields=['created_at'], name='cms_access__created_1b3928_idx'),
        ),
        migrations.AddIndex(
            model_name='accesslog',
            index=models.Index(fields=['tenant', 'article', 'created_at'], name='cms_access__tenant__27503a_idx'),
        ),
        migrations.AddIndex(
            model_name='articlemeta',
            index=models.Index(fields=['tenant'], name='cms_article_tenant__5561f5_idx'),
        ),
        migrations.AddIndex(
            model_name='articlestatistics',
            index=models.Index(fields=['views_count'], name='cms_article_views_c_821af0_idx'),
        ),
        migrations.AddIndex(
            model_name='articlestatistics',
            index=models.Index(fields=['likes_count'], name='cms_article_likes_c_564888_idx'),
        ),
        migrations.AddIndex(
            model_name='articlestatistics',
            index=models.Index(fields=['tenant', 'views_count'], name='cms_article_tenant__bf3e56_idx'),
        ),
        migrations.AddIndex(
            model_name='articlestatistics',
            index=models.Index(fields=['tenant', 'likes_count'], name='cms_article_tenant__7d708d_idx'),
        ),
        migrations.AddIndex(
            model_name='articleversion',
            index=models.Index(fields=['article', 'version_number'], name='cms_article_article_35e8c6_idx'),
        ),
        migrations.AddIndex(
            model_name='articleversion',
            index=models.Index(fields=['editor'], name='cms_article_editor__16e9e4_idx'),
        ),
        migrations.AddIndex(
            model_name='articleversion',
            index=models.Index(fields=['tenant', 'article', 'version_number'], name='cms_article_tenant__620dc9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='articleversion',
            unique_together={('article', 'version_number')},
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['parent'], name='cms_categor_parent__a5b368_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['is_active'], name='cms_categor_is_acti_d7f522_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['tenant', 'parent'], name='cms_categor_tenant__cbc12e_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['tenant', 'is_active'], name='cms_categor_tenant__945ea6_idx'),
        ),
        migrations.AddIndex(
            model_name='articlecategory',
            index=models.Index(fields=['category'], name='cms_article_categor_72b227_idx'),
        ),
        migrations.AddIndex(
            model_name='articlecategory',
            index=models.Index(fields=['tenant', 'article'], name='cms_article_tenant__140c1a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='articlecategory',
            unique_together={('article', 'category')},
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['article'], name='cms_comment_article_005aa6_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['user'], name='cms_comment_user_id_989c38_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['parent'], name='cms_comment_parent__09f222_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['status', 'created_at'], name='cms_comment_status_ca6fe3_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['tenant', 'status', 'created_at'], name='cms_comment_tenant__846b18_idx'),
        ),
        migrations.AddIndex(
            model_name='interaction',
            index=models.Index(fields=['article', 'type'], name='cms_interac_article_00fa85_idx'),
        ),
        migrations.AddIndex(
            model_name='interaction',
            index=models.Index(fields=['user', 'type'], name='cms_interac_user_id_94f6ca_idx'),
        ),
        migrations.AddIndex(
            model_name='interaction',
            index=models.Index(fields=['tenant', 'user', 'article', 'type'], name='cms_interac_tenant__2e481b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='interaction',
            unique_together={('user', 'article', 'type')},
        ),
        migrations.AddIndex(
            model_name='operationlog',
            index=models.Index(fields=['user'], name='cms_operati_user_id_ec0a8c_idx'),
        ),
        migrations.AddIndex(
            model_name='operationlog',
            index=models.Index(fields=['entity_type', 'entity_id'], name='cms_operati_entity__3135c0_idx'),
        ),
        migrations.AddIndex(
            model_name='operationlog',
            index=models.Index(fields=['action'], name='cms_operati_action_b85ac9_idx'),
        ),
        migrations.AddIndex(
            model_name='operationlog',
            index=models.Index(fields=['created_at'], name='cms_operati_created_070b75_idx'),
        ),
        migrations.AddIndex(
            model_name='operationlog',
            index=models.Index(fields=['tenant', 'entity_type', 'entity_id'], name='cms_operati_tenant__1d181f_idx'),
        ),
        migrations.AddIndex(
            model_name='articletag',
            index=models.Index(fields=['tag'], name='cms_article_tag_id_fa1cdf_idx'),
        ),
        migrations.AddIndex(
            model_name='articletag',
            index=models.Index(fields=['tenant', 'article'], name='cms_article_tenant__410201_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='articletag',
            unique_together={('article', 'tag')},
        ),
        migrations.AddIndex(
            model_name='taggroup',
            index=models.Index(fields=['is_active'], name='cms_tag_gro_is_acti_38219d_idx'),
        ),
        migrations.AddIndex(
            model_name='taggroup',
            index=models.Index(fields=['tenant', 'is_active'], name='cms_tag_gro_tenant__5f2176_idx'),
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['group'], name='cms_tag_group_i_fd2e78_idx'),
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['is_active'], name='cms_tag_is_acti_d6243d_idx'),
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['tenant', 'is_active'], name='cms_tag_tenant__9990e3_idx'),
        ),
        migrations.AddIndex(
            model_name='userlevel',
            index=models.Index(fields=['tenant'], name='cms_user_le_tenant__47d687_idx'),
        ),
        migrations.AddIndex(
            model_name='userlevel',
            index=models.Index(fields=['level'], name='cms_user_le_level_36547e_idx'),
        ),
        migrations.AddIndex(
            model_name='userlevel',
            index=models.Index(fields=['is_default'], name='cms_user_le_is_defa_d7be08_idx'),
        ),
        migrations.AddIndex(
            model_name='userlevelrelation',
            index=models.Index(fields=['level'], name='cms_user_le_level_i_cc8625_idx'),
        ),
        migrations.AddIndex(
            model_name='userlevelrelation',
            index=models.Index(fields=['end_time'], name='cms_user_le_end_tim_9c93b4_idx'),
        ),
        migrations.AddIndex(
            model_name='userlevelrelation',
            index=models.Index(fields=['tenant', 'user'], name='cms_user_le_tenant__2922d7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userlevelrelation',
            unique_together={('user', 'level')},
        ),
    ]
